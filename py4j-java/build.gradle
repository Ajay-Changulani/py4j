apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'

def jdk6BootClasspathEnv = System.getenv("JDK6_BOOT_CLASSPATH")

// Only add spotless for JDK >= 1.8
if (JavaVersion.current().isJava8Compatible()) {
    apply plugin: 'com.diffplug.gradle.spotless'
}

// FindBugs require JDK >= 1.7
if (JavaVersion.current().isJava7Compatible()) {
    apply plugin: 'findbugs'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // Only add spotless for JDK >= 1.8
        if (JavaVersion.current().isJava8Compatible()) {
            classpath group: 'com.diffplug.gradle.spotless', name: 'spotless', version: '1.3.2'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // For Java 8 Support
    if (JavaVersion.current().isJava7Compatible()) {
        findbugs group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.+'
    }
}

// Only add spotless for JDK >= 1.8
if (JavaVersion.current().isJava8Compatible()) {
    spotless {
        java {
            licenseHeaderFile 'py4j.license.java'
            eclipseFormatFile 'py4j.formatter.xml'
            importOrderFile 'py4j.importorder'
        }
    }
}

// For now, tests are not clean and that's fine because we want to test many
// unclean scenarios.
if (JavaVersion.current().isJava7Compatible()) {
    findbugsTest.enabled = false
}

jacoco {
    // For Java 8 Support
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

// Backward compatibility with previous versions of Py4J
task copyMainJar(type: Copy, dependsOn: jar) {
    from 'build/libs/'
    into '.'
    include "py4j-java-${version}.jar"
    rename { String fileName ->
        fileName.replace('-java-', '')
    }
}

task cleanMainJar(type: Delete) {
    delete "./py4j${version}.jar"
}

// If someone wants to access all examples
task jarTests(type: Jar) {
    description 'Creates a jar file with all test classes.'
    baseName = 'py4j-tests'
    from sourceSets.test.output
    from sourceSets.main.output
}

// Maven support
task createPom << {
    pom {
        project {
            groupId 'net.sf.py4j'
            artifactId 'py4j'
            version '0.10.0-SNAPSHOT'
            description 'Py4J enables Python programs running in a Python interpreter to dynamically access Java objects in a Java Virtual Machine. Methods are called as if the Java objects resided in the Python interpreter and Java collections can be accessed through standard Python collection methods. Py4J also enables Java programs to call back Python objects.'
            scm {
                connection 'scm:git:git@github.com:bartdag/py4j.git'
                developerConnection 'scm:git:git@github.com:bartdag/py4j.git'
                url 'git@github.com:bartdag/py4j.git'
            }
            developers {
                developer {
                    id 'bartdag'
                    name 'Barthelemy Dagenais'
                    url 'http://infobart.com/'
                }
            }
            licenses {
                license {
                    name 'The New BSD License'
                    url 'http://www.opensource.org/licenses/bsd-license.html'
                }
            }
            properties {
                project.build.sourceEncoding 'UTF-8'
                project.build.outputEncoding 'UTF-8'
            }
        }
    }.writeTo("pom.xml")
}

if (jdk6BootClasspathEnv && !jdk6BootClasspath) {
    jdk6BootClasspath = jdk6BootClasspathEnv
}

if (jdk6BootClasspath) {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.bootClasspath = "$jdk6BootClasspath"
    }
}

// Build the py4j-tests jar
assemble {
    dependsOn jarTests
    dependsOn copyMainJar
}

clean {
    dependsOn cleanMainJar
}
